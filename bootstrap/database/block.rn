//  Copyright 2021 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use root
use expr
use function
use line
use statement

// A liternal block statement.  All statements exist within a block.
class Block(self, line: Line) {
  self.line = line
  // For dead code analysis.
  canReturn = false
  canContinue = false

  // Dump the block to the end of |text| for debugging.
  func dumpToString(self: Block, var text: string) {
    getRoot().indent(text)
    text += "block 0x%x {\n" % <u32>self
    getRoot().incrementIndent()
    for statement in self.statements() {
      statement.dumpToString(text)
    }
    getRoot().decrementIndent()
    getRoot().indent(text)
    text += "}\n"
  }

  // Dump the block to stdout for debugging.
  func dump(self) {
    text = ""
    self.dumpToString(text)
    println text
  }

  // Copy the block's statements into the block containing |destStatement|
  // right after |destStatement|.
  func copyStatementsAfterStatement(self, destStatement: Statement) {
    for statement in self.statements() {
      destStatement = destStatement.appendCopyAfterStatement(destStatement)
    }
  }

  // Move the block's statements into the block containing |destStatement| right
  // after |destStatement|.
  func moveStatementsAfterStatement(self, destStatement: Statement) {
    destBlock = destStatement.block
    for statement in self.safeStatements() {
      self.removeStatement(statement)
      destBlock.insertStatementAfterStatement(destStatement, statement)
      destStatement = statement
    }
  }

  // Append the contents of |self| to |destBlock|, and destroy |self|.
  func appendToBlock(self, destBlock: Block) {
    for statement in self.safeStatements() {
      self.removeStatement(statement)
      destBlock.appendStatement(statement)
    }
    self.destroy()
  }

  // Prepend the contents of |self| to |destBlock|, and destroy |self|.
  func prependToBlock(self, destBlock: Block) {
    for statement in self.safeReverseStatements() {
      self.removeStatement(statement)
      destBlock.insertStatement(statement)
    }
    self.destroy()
  }

  // Make a copy of the block, without sub-blocks.
  func copy(self) -> Block {
    newBlock = Block(block.line)
    for statement in self.statements() {
      statement.appendCopy(newBlock)
    }
    return newBlock
  }

  // Empty the block of contents, but leave sub-blocks in place.
  func destroyStatements(self) {
    for statement in self.safeStatements() {
      statement.destroy()
    }
  }
}

relation OneToOne Statement:"Owning" Block:"Sub" cascade
relation OneToOne Function:"Owning" Block:"Sub" cascade
