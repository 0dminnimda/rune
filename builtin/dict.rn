//  Copyright 2021 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

class Dict(self, <keyType>, <valueType>) {

  func bindingHint(self, keyType, valueType) {
    self.insert(null(keyType), null(valueType))
    return true
  }

  class Entry(self, <key>, <value>) {
    self.key = key
    self.value = value
  }

  func insert(self, key, value) {
    entry = Dict.Entry(key, value)
    self.insertEntry(entry)
  }

  func remove(self, key) {
    entry = self.findEntry(key)
    if isnull(entry) {
      throw "Key not found in dictionary"
    }
    self.removeEntry(entry)
  }

  func find(self, key) {
    entry = self.findEntry(key)
    if isnull(entry) {
      throw "Key not found in dictionary"
    }
    return entry.value
  }

  operator [] (dict: Dict, key) {
    return dict.find(dict, key)
  }

  operator in (key, dict: Dict) {
    return !isnull(dict.findEntry(key))
  }

  iterator values(self) {
      for entry in self.entries() {
          yield entry.value
      }
  }

  iterator keys(self) {
      for entry in self.entries() {
          yield entry.key
      }
  }

  iterator items(self) {
      for entry in self.entries() {
          yield (entry.key, entry.value)
      }
  }
}

relation Hashed Dict Dict.Entry cascade ("key", "Entries")

unittest {
  dict = Dict(string, u32)
  dict.insert("Bob", 32u32)
  value = dict.find("Bob")
  println value
  dict.remove("Bob")
  dict = Dict(u32, string)
  dict2.insert(32u32, "Alice")
  value2 = dict2.find(32u32)
  println value2
  dict2.remove(32u32)
}
